# test with a CTHMM with 3 states, initiate Q
Q_mat0 = [-0.6 0.2 0.4;
        0.4 -1 0.6;
        0.25 0.5 -0.75]

π_list0 = [0.5; 0.3; 0.2]

state_list0 = [CTHMM.NormalExpert(0, 1) CTHMM.NormalExpert(-5, 1) CTHMM.NormalExpert(5, 1)]   

Random.seed!(1234)
df_sim = sim_dataset(Q_mat0, π_list0, state_list0, 500)

state_list_init = [CTHMM.NormalExpert(0, 3) CTHMM.NormalExpert(-2, 2) CTHMM.NormalExpert(2, 2)]

(Q_mat_fit = [-0.6 0.2 0.4; 0.4 -1.0 0.6; 0.25 0.5 -0.75], π_list_fit = [0.5, 0.3, 0.2], state_list_fit = Main.CTHMM.NormalExpert{Float64}[Main.CTHMM.NormalExpert{Float64}(-0.0014076361735487378, 1.008430716838247) Main.CTHMM.NormalExpert{Float64}(-4.994638237107112, 0.9878039941568858) Main.CTHMM.NormalExpert{Float64}(4.984979960798748, 1.0033394436207044)], converge = true, iter = 23, ll = -114325.25955436463)





state_list0 = [CTHMM.NormalExpert(0, 1) CTHMM.NormalExpert(-5, 2) CTHMM.NormalExpert(5, 2)]   

Random.seed!(1234)
df_sim = sim_dataset(Q_mat0, π_list0, state_list0, 500)

state_list_init = [CTHMM.NormalExpert(0, 1) CTHMM.NormalExpert(-2, 1) CTHMM.NormalExpert(2, 1)]

(Q_mat_fit = [-0.6 0.2 0.4; 0.4 -1.0 0.6; 0.25 0.5 -0.75], π_list_fit = [0.5, 0.3, 0.2], state_list_fit = Main.CTHMM.NormalExpert{Float64}[Main.CTHMM.NormalExpert{Float64}(-0.006535348661483489, 1.0104050398718074) Main.CTHMM.NormalExpert{Float64}(-4.994892212489638, 1.9732584306413834) Main.CTHMM.NormalExpert{Float64}(4.957434259444262, 2.01512396935196)], converge = true, iter = 21, ll = -128732.57315877751)




# LABEL-SWITCHING if the diagonal elements are of similar sizes
state_list0 = [CTHMM.NormalExpert(0, 2) CTHMM.NormalExpert(-4, 1) CTHMM.NormalExpert(6, 2);
                CTHMM.NormalExpert(0, 3) CTHMM.NormalExpert(-2, 2) CTHMM.NormalExpert(2, 2)]

Random.seed!(1234)
df_sim = sim_dataset(Q_mat0, π_list0, state_list0, 500)

state_list_init = [CTHMM.NormalExpert(0, 1) CTHMM.NormalExpert(0, 1) CTHMM.NormalExpert(0, 1);
                CTHMM.NormalExpert(0, 1) CTHMM.NormalExpert(0, 1) CTHMM.NormalExpert(0, 1)]

(Q_mat_fit = [-0.6 0.2 0.4; 0.4 -1.0 0.6; 0.25 0.5 -0.75], π_list_fit = [0.5, 0.3, 0.2], state_list_fit = Main.CTHMM.NormalExpert{Float64}[Main.CTHMM.NormalExpert{Float64}(-3.8371191187800635, 1.0946607376566806) Main.CTHMM.NormalExpert{Float64}(0.259064300253374, 1.6661213058294924) Main.CTHMM.NormalExpert{Float64}(5.888382958460172, 2.0598063477620436); Main.CTHMM.NormalExpert{Float64}(-1.850788811525659, 2.137200485262036) Main.CTHMM.NormalExpert{Float64}(0.04688923829185572, 3.0979403222685216) Main.CTHMM.NormalExpert{Float64}(1.9488116495276842, 2.0223175690851543)], converge = true, iter = 50, ll = -225930.54118858036)
