## 3 states, 2 dimensions

# true parameters and simulate data
Q_mat0 = [-0.6 0.2 0.4;
        0.4 -1 0.6;
        0.25 0.5 -0.75]

π_list0 = [0.5; 0.3; 0.2]

response_list = ["delta_radian", "acceleration"]

state_list0 = [CTHMM.NormalExpert(0, 1) CTHMM.NormalExpert(-5, 1) CTHMM.NormalExpert(5, 1);
                CTHMM.VonMisesExpert(0, 2) CTHMM.VonMisesExpert(2, 2) CTHMM.VonMisesExpert(-2, 2)]
        
Random.seed!(1234)
df_sim = sim_dataset(Q_mat0, π_list0, state_list0, 500) # simulation: 30 distinct time_intervals

# initial guess of parameters
Q_mat_init = [-0.2 0.1 0.1;
        0.2 -0.4 0.2;
        0.3 0.3 -0.6]

π_list_init = [0.3; 0.3; 0.4]

state_list_init = [CTHMM.NormalExpert(0, 1) CTHMM.NormalExpert(-5, 1) CTHMM.NormalExpert(5, 1);
                   CTHMM.VonMisesExpert(0, 2) CTHMM.VonMisesExpert(2, 2) CTHMM.VonMisesExpert(-2, 2)]

# learn Q 
fitted = CTHMM_learn_EM_Q_only(df_sim, ["response1", "response2"], Q_mat_init, π_list_init, state_list0; max_iter = 1000, Q_max_iter = 5)
fitted

########################################################################
# 3 states, 2 dimensions, NormalExperts and VonMisesExperts
# π_list0 | fitted.π_list_fit
# 0.5       |  0.526083
# 0.3       |  0.307575
# 0.2       |  0.166342

# Q_mat0 | fitted.Q_mat_fit
# -0.6    0.2   0.4   |  -0.599005   0.24828    0.350725
# 0.4   -1.0   0.6   |   0.412579  -1.01411    0.601531
# 0.25   0.5  -0.75  |   0.249818   0.454844  -0.704662
#
# fitted.iter: 721, fitted.ll: -165542.1544422696
########################################################################



## 3 states, 1 dimension

# true parameters and simulate data
Q_mat0 = [-0.6 0.2 0.4;
        0.4 -1 0.6;
        0.25 0.5 -0.75]

π_list0 = [0.5; 0.3; 0.2]

response_list = ["acceleration"]

state_list0 = [CTHMM.NormalExpert(0, 1) CTHMM.NormalExpert(-5, 1) CTHMM.NormalExpert(5, 1)]
        
Random.seed!(1234)
df_sim = sim_dataset(Q_mat0, π_list0, state_list0, 500) # simulation: 30 distinct time_intervals

# initial guess of parameters
Q_mat_init = [-0.2 0.1 0.1;
        0.2 -0.4 0.2;
        0.3 0.3 -0.6]

π_list_init = [0.3; 0.3; 0.4]

state_list_init = [CTHMM.NormalExpert(0, 1) CTHMM.NormalExpert(-5, 1) CTHMM.NormalExpert(5, 1)]

# learn Q 
fitted = CTHMM_learn_EM_Q_only(df_sim, ["response1"], Q_mat_init, π_list_init, state_list0; max_iter = 1000, Q_max_iter = 5)
fitted

########################################################################
# 3 states, 1 dimension, NormalExperts and VonMisesExperts
# π_list0 | fitted.π_list_fit
# 0.5                                |  0.539808
# 0.3                                |  0.287073
# 0.2                                |  0.173119

# Q_mat0 | fitted.Q_mat_fit
# -0.6    0.2   0.4   |  -0.57696    0.203474   0.373486
# 0.4   -1.0   0.6   |   0.375532  -1.00906    0.633524
# 0.25   0.5  -0.75  |   0.249728   0.50052   -0.750248
#
# fitted.iter: 861, fitted.ll: -114327.27642453539
########################################################################



## 4 states, 1 dimension

# true parameters
Q_mat0 = [-1.5 0.5 0.5 0.5;
        0.1 -0.3 0.1 0.1;
        0.2 0.2 -0.6 0.2;
        0.5 0.5 0.5 -1.5]

π_list0 = [0.5; 0.25; 0.15; 0.1]

state_list0 = [CTHMM.NormalExpert(0, 0.5) CTHMM.NormalExpert(0, 1) CTHMM.NormalExpert(0, 1.5) CTHMM.NormalExpert(0, 2)]

response_list = ["acceleration"]
                        
Random.seed!(1234)
df_sim = sim_dataset(Q_mat0, π_list0, state_list0, 500) # simulation: 30 distinct time_intervals

# initial guess of parameters
Q_mat_init = [-0.7 0.1 0.1 0.5;
              0.2 -0.5 0.2 0.1;
              0.1 0.1 -0.4 0.2;
              0.1 0.1 0.1 -0.3]

π_list_init = [0.4; 0.3; 0.2; 0.1]

state_list_init = [CTHMM.NormalExpert(0, 0.5) CTHMM.NormalExpert(0, 1) CTHMM.NormalExpert(0, 1.5) CTHMM.NormalExpert(0, 2)] # state_list0

# learn Q 
fitted = CTHMM_learn_EM_Q_only(df_sim, ["response1"], Q_mat_init, π_list_init, state_list0; max_iter = 1000, Q_max_iter = 5)
fitted

########################################################################
# 4 states, 1 dimension, NormalExperts
# π_list0 | fitted.π_list_fit
# 0.4                                |  0.388344
# 0.3                                |  0.544437
# 0.2                                |  0.020971
# 0.1                                |  0.046248

# Q_mat0 | fitted.Q_mat_fit
# -0.7 0.1 0.1 0.5  |  -0.727117 0.250281 0.140803 0.336032
# 0.2 -0.5 0.2 0.1   |   0.079310 -0.218400 0.112030 0.027060
# 0.1 0.1 -0.4 0.2  |   0.072852 0.180691 -0.350313 0.096770
# 0.1 0.1 0.1 -0.3  |  0.160636 0.383084 0.209638 -0.753358
#
# fitted.iter: 217, fitted.ll: -74595.86254979028
########################################################################


## 4 states, 2 dimensions

# true parameters
Q_mat0 = [-1.5 0.5 0.5 0.5;
        0.1 -0.3 0.1 0.1;
        0.2 0.2 -0.6 0.2;
        0.5 0.5 0.5 -1.5]

π_list0 = [0.5; 0.25; 0.15; 0.1]

state_list0 = [CTHMM.NormalExpert(0, 0.5) CTHMM.NormalExpert(0, 1) CTHMM.NormalExpert(0, 1.5) CTHMM.NormalExpert(0, 2);
                CTHMM.NormalExpert(1, 0.5) CTHMM.NormalExpert(1, 1) CTHMM.NormalExpert(1, 1.5) CTHMM.NormalExpert(1, 2)]

response_list = ["delta_radian", "acceleration"]
                        
Random.seed!(1234)
df_sim = sim_dataset(Q_mat0, π_list0, state_list0, 500) # simulation: 30 distinct time_intervals

# initial guess of parameters
Q_mat_init = [-0.7 0.1 0.1 0.5;
              0.2 -0.5 0.2 0.1;
              0.1 0.1 -0.4 0.2;
              0.1 0.1 0.1 -0.3]

π_list_init = [0.4; 0.3; 0.2; 0.1]

state_list_init = [CTHMM.NormalExpert(0, 0.5) CTHMM.NormalExpert(0, 1) CTHMM.NormalExpert(0, 1.5) CTHMM.NormalExpert(0, 2);
                   CTHMM.NormalExpert(1, 0.5) CTHMM.NormalExpert(1, 1) CTHMM.NormalExpert(1, 1.5) CTHMM.NormalExpert(1, 2)] # state_list0

# learn Q 
fitted = CTHMM_learn_EM_Q_only(df_sim, ["response1", "response2"], Q_mat_init, π_list_init, state_list0; max_iter = 1000, Q_max_iter = 5)
fitted

########################################################################
# 4 states, 2 dimensions, NormalExperts and VonMisesExperts
# π_list0 | fitted.π_list_fit
# 0.5                               |  0.49557
# 0.25                              |  0.171033
# 0.15                              |  0.333083
# 0.1                               |  0.000315014

# Q_mat0 | fitted.Q_mat_fit
# -1.5   0.5   0.5   0.5  |  -1.07337    0.239655   0.226912   0.606803
# 0.1  -0.3   0.1   0.1  |   0.110544  -0.301042   0.144082   0.046416
# 0.2   0.2  -0.6   0.2  |   0.115723   0.242129  -0.463713   0.105861
# 0.5   0.5   0.5  -1.5  |   0.269778   0.614848   0.222509  -1.10713
#
# fitted.iter: 1000, fitted.ll: -145751.3372952897
########################################################################